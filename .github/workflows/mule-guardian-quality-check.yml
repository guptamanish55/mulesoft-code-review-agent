name: Mule Guardian Code Quality Check

# When this workflow runs
on:
  push:
    branches: [ main, dev ]  # Added 'dev' for your branch
  pull_request:
    branches: [ main, dev ]

# Environment variables
env:
  COMPLIANCE_THRESHOLD: 75  # Minimum compliance percentage required
  PMD_VERSION: "7.0.0"

jobs:
  code-quality-check:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Get the code
    - name: Checkout Code
      uses: actions/checkout@v4
      
    # Step 2: Setup Python (for Mule Guardian)
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    # Step 3: Setup Java (required for PMD)
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        
    # Step 4: Install PMD with fallback methods (FIXED)
    - name: Install PMD
      run: |
        echo "üì¶ Installing PMD..."
        
        # Method 1: Try direct download with current format
        if wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F${{ env.PMD_VERSION }}/pmd-bin-${{ env.PMD_VERSION }}.zip; then
          echo "‚úÖ Downloaded PMD using current format"
          unzip pmd-bin-${{ env.PMD_VERSION }}.zip
          sudo mv pmd-bin-${{ env.PMD_VERSION }} /opt/pmd
        # Method 2: Try alternative URL format  
        elif wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F${{ env.PMD_VERSION }}/pmd-dist-${{ env.PMD_VERSION }}-bin.zip; then
          echo "‚úÖ Downloaded PMD using alternative format"
          unzip pmd-dist-${{ env.PMD_VERSION }}-bin.zip
          sudo mv pmd-bin-${{ env.PMD_VERSION }} /opt/pmd
        # Method 3: Try latest stable version
        elif wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.0.0/pmd-bin-7.0.0.zip; then
          echo "‚úÖ Downloaded PMD 7.0.0 as fallback"
          unzip pmd-bin-7.0.0.zip
          sudo mv pmd-bin-7.0.0 /opt/pmd
        # Method 4: Use package manager as last resort
        else
          echo "‚ö†Ô∏è Direct download failed, trying package manager..."
          sudo apt-get update
          sudo apt-get install -y pmd
          # Create symlink for consistency
          if command -v pmd >/dev/null 2>&1; then
            sudo mkdir -p /opt/pmd/bin
            sudo ln -sf $(which pmd) /opt/pmd/bin/pmd
            echo "‚úÖ PMD installed via package manager"
          else
            echo "‚ùå PMD installation failed completely"
            exit 1
          fi
        fi
        
        # Add to PATH and verify installation
        echo "/opt/pmd/bin" >> $GITHUB_PATH
        export PATH="/opt/pmd/bin:$PATH"
        
        # Verify PMD is working
        if /opt/pmd/bin/pmd --version; then
          echo "‚úÖ PMD installed and verified successfully"
        else
          echo "‚ùå PMD installation verification failed"
          exit 1
        fi
        
    # Step 5: Install Mule Guardian Dependencies
    - name: Install Python Dependencies
      run: |
        echo "üì¶ Installing Python dependencies..."
        pip install --upgrade pip
        pip install Flask==2.3.3 Flask-CORS==4.0.0 lxml==6.0.0 reportlab==4.4.2
        pip install requests==2.32.4 pathlib2==2.3.7 dataclasses-json==0.6.1
        echo "‚úÖ Dependencies installed successfully"
        
    # Step 6: Run Mule Guardian Analysis (FIXED PATH)
    - name: Run Mule Guardian Analysis
      id: mule-analysis
      run: |
        echo "üîç Starting Mule Guardian analysis..."
        
        # Check if we're analyzing main branch (core files) or dev branch (sample project)
        if [ -f "mulesoft_ai_code_review_agent.py" ]; then
          echo "üìç Found core Mule Guardian files in current branch"
          ANALYSIS_TARGET="."
        elif [ -d "sample_demo_project" ]; then
          echo "üìç Found sample project - analyzing sample_demo_project/"
          ANALYSIS_TARGET="sample_demo_project"
        else
          echo "‚ùå Error: Neither core files nor sample project found"
          echo "Please ensure your repository contains either:"
          echo "  1. mulesoft_ai_code_review_agent.py (main branch)"
          echo "  2. sample_demo_project/ folder (dev branch)"
          exit 1
        fi
        
        # Run the analysis on the correct target
        python mulesoft_ai_code_review_agent.py "$ANALYSIS_TARGET" comprehensive-mulesoft-ruleset-no-debug.xml -o quality-report.json -v
        
        # Extract compliance percentage from report
        COMPLIANCE=$(python -c "
        import json
        try:
            with open('quality-report.json', 'r') as f:
                data = json.load(f)
            compliance = data.get('compliance_percentage', 0)
            print(f'{compliance:.1f}')
        except Exception as e:
            print('0')
        ")
        
        echo "COMPLIANCE_SCORE=$COMPLIANCE" >> $GITHUB_OUTPUT
        echo "üõ°Ô∏è Project Compliance: $COMPLIANCE%"
        
    # Step 7: Check Quality Gate
    - name: Quality Gate Check
      run: |
        SCORE=${{ steps.mule-analysis.outputs.COMPLIANCE_SCORE }}
        THRESHOLD=${{ env.COMPLIANCE_THRESHOLD }}
        
        echo "üìä Compliance Score: $SCORE%"
        echo "üéØ Required Threshold: $THRESHOLD%"
        
        # Use Python for decimal comparison (more reliable than bash)
        RESULT=$(python -c "
        score = float('$SCORE')
        threshold = float('$THRESHOLD')
        if score < threshold:
            print('FAIL')
        else:
            print('PASS')
        ")
        
        if [ "$RESULT" = "FAIL" ]; then
          echo "‚ùå QUALITY GATE FAILED"
          echo "Project compliance ($SCORE%) is below required threshold ($THRESHOLD%)"
          echo "Please improve code quality before merging."
          exit 1
        else
          echo "‚úÖ QUALITY GATE PASSED"
          echo "Project meets quality standards!"
        fi
        
    # Step 8: Generate HTML Report
    - name: Generate HTML Report
      if: always()  # Run even if previous steps failed
      run: |
        echo "üìÑ Generating HTML report..."
        python -c "
        import json
        import sys
        import os
        
        # Simple HTML report generator
        try:
            with open('quality-report.json', 'r') as f:
                report = json.load(f)
            
            html_content = f'''
            <!DOCTYPE html>
            <html>
            <head>
                <title>Mule Guardian Quality Report</title>
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 40px; }}
                    .header {{ background: #667eea; color: white; padding: 20px; border-radius: 8px; }}
                    .summary {{ background: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 8px; }}
                    .metric {{ display: inline-block; margin: 10px 20px; }}
                    .violation {{ margin: 10px 0; padding: 10px; border-left: 4px solid #dc3545; }}
                    .high {{ border-color: #dc3545; }}
                    .medium {{ border-color: #ffc107; }}
                    .low {{ border-color: #28a745; }}
                </style>
            </head>
            <body>
                <div class=\"header\">
                    <h1>üõ°Ô∏è Mule Guardian Code Quality Report</h1>
                    <p>Project: {report.get('project_name', 'Unknown')}</p>
                    <p>Generated: {report.get('scan_timestamp', 'Unknown')}</p>
                </div>
                
                <div class=\"summary\">
                    <h2>üìä Quality Summary</h2>
                    <div class=\"metric\">
                        <strong>Compliance Score:</strong> {report.get('compliance_percentage', 0):.1f}%
                    </div>
                    <div class=\"metric\">
                        <strong>Total Violations:</strong> {report.get('total_violations', 0)}
                    </div>
                    <div class=\"metric\">
                        <strong>Files Scanned:</strong> {report.get('files_scanned', 0)}
                    </div>
                </div>
                
                <div class=\"violations\">
                    <h2>üîç Violation Breakdown</h2>
                    <p><strong>HIGH Priority:</strong> {report.get('violations_by_priority', {}).get('HIGH', 0)}</p>
                    <p><strong>MEDIUM Priority:</strong> {report.get('violations_by_priority', {}).get('MEDIUM', 0)}</p>
                    <p><strong>LOW Priority:</strong> {report.get('violations_by_priority', {}).get('LOW', 0)}</p>
                </div>
                
                <div class=\"recommendations\">
                    <h2>üí° Recommendations</h2>
                    <p>Review the violations above and implement the suggested fixes to improve code quality.</p>
                </div>
            </body>
            </html>
            '''
            
            with open('quality-report.html', 'w') as f:
                f.write(html_content)
            
            print('‚úÖ HTML report generated successfully')
            
        except Exception as e:
            print(f'‚ùå Error generating HTML report: {e}')
            # Create a basic error report
            with open('quality-report.html', 'w') as f:
                f.write('<html><body><h1>Report Generation Failed</h1><p>Please check the logs for details.</p></body></html>')
        "
        
    # Step 9: Upload Reports as Artifacts
    - name: Upload Quality Reports
      if: always()  # Always upload, even if analysis failed
      uses: actions/upload-artifact@v4
      with:
        name: mule-guardian-quality-report
        path: |
          quality-report.json
          quality-report.html
        retention-days: 30
