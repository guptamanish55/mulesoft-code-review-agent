name: Mule Guardian Code Quality Check

# When this workflow runs
on:
  push:
    branches: [ main, develop, dev ]  # Added 'dev' for your branch
  pull_request:
    branches: [ main, develop, dev ]

# Environment variables
env:
  COMPLIANCE_THRESHOLD: 75  # Set to 75% for demo (will show quality gate working)
  PMD_VERSION: "7.0.0"

jobs:
  code-quality-check:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Get the code
    - name: Checkout Code
      uses: actions/checkout@v4
      
    # Step 1.5: Get core files from main branch if not present
    - name: Get Core Mule Guardian Files
      run: |
        echo "üîç Checking for core Mule Guardian files..."
        
        if [ ! -f "mulesoft_ai_code_review_agent.py" ]; then
          echo "‚ö†Ô∏è Core files not found in current branch, fetching from main..."
          
          # Fetch main branch
          git fetch origin main
          
          # Copy core files from main branch
          git show main:mulesoft_ai_code_review_agent.py > mulesoft_ai_code_review_agent.py
          git show main:comprehensive-mulesoft-ruleset-no-debug.xml > comprehensive-mulesoft-ruleset-no-debug.xml
          git show main:requirements.txt > requirements.txt
          
          echo "‚úÖ Core files copied from main branch"
        else
          echo "‚úÖ Core files found in current branch"
        fi
        
        # Verify files exist
        if [ ! -f "mulesoft_ai_code_review_agent.py" ]; then
          echo "‚ùå Error: mulesoft_ai_code_review_agent.py still not found"
          exit 1
        fi
        
        if [ ! -f "comprehensive-mulesoft-ruleset-no-debug.xml" ]; then
          echo "‚ùå Error: comprehensive-mulesoft-ruleset-no-debug.xml still not found"
          exit 1
        fi
        
        echo "‚úÖ All required files verified"
      
    # Step 2: Setup Python (for Mule Guardian)
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    # Step 3: Setup Java (required for PMD)
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        
    # Step 4: Install PMD with fallback methods (FIXED FOR LINUX)
    - name: Install PMD
      run: |
        echo "üì¶ Installing PMD..."
        
        # Method 1: Try direct download with current format
        if wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F${{ env.PMD_VERSION }}/pmd-bin-${{ env.PMD_VERSION }}.zip; then
          echo "‚úÖ Downloaded PMD using current format"
          unzip pmd-bin-${{ env.PMD_VERSION }}.zip
          sudo mv pmd-bin-${{ env.PMD_VERSION }} /opt/pmd
        # Method 2: Try alternative URL format  
        elif wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F${{ env.PMD_VERSION }}/pmd-dist-${{ env.PMD_VERSION }}-bin.zip; then
          echo "‚úÖ Downloaded PMD using alternative format"
          unzip pmd-dist-${{ env.PMD_VERSION }}-bin.zip
          sudo mv pmd-bin-${{ env.PMD_VERSION }} /opt/pmd
        # Method 3: Try latest stable version
        elif wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.0.0/pmd-bin-7.0.0.zip; then
          echo "‚úÖ Downloaded PMD 7.0.0 as fallback"
          unzip pmd-bin-7.0.0.zip
          sudo mv pmd-bin-7.0.0 /opt/pmd
        # Method 4: Use package manager as last resort
        else
          echo "‚ö†Ô∏è Direct download failed, trying package manager..."
          sudo apt-get update
          sudo apt-get install -y pmd
          # Create symlink for consistency
          if command -v pmd >/dev/null 2>&1; then
            sudo mkdir -p /opt/pmd/bin
            sudo ln -sf $(which pmd) /opt/pmd/bin/pmd
            echo "‚úÖ PMD installed via package manager"
          else
            echo "‚ùå PMD installation failed completely"
            exit 1
          fi
        fi
        
        # CRITICAL FIX: Create the path structure that Mule Guardian expects
        echo "üîó Creating expected PMD paths for Mule Guardian..."
        sudo mkdir -p /opt/homebrew/bin
        sudo ln -sf /opt/pmd/bin/pmd /opt/homebrew/bin/pmd
        
        # Also add both paths to PATH for maximum compatibility
        echo "/opt/pmd/bin" >> $GITHUB_PATH
        echo "/opt/homebrew/bin" >> $GITHUB_PATH
        export PATH="/opt/pmd/bin:/opt/homebrew/bin:$PATH"
        
        # Verify PMD is accessible from both locations
        echo "üß™ Verifying PMD installation..."
        if /opt/pmd/bin/pmd --version; then
          echo "‚úÖ PMD verified at /opt/pmd/bin/pmd"
        else
          echo "‚ùå PMD verification failed at /opt/pmd/bin/pmd"
          exit 1
        fi
        
        if /opt/homebrew/bin/pmd --version; then
          echo "‚úÖ PMD verified at /opt/homebrew/bin/pmd (Mule Guardian expected path)"
        else
          echo "‚ùå PMD verification failed at /opt/homebrew/bin/pmd"
          exit 1
        fi
        
        echo "‚úÖ PMD installed and verified successfully at both locations"
        
    # Step 5: Install Mule Guardian Dependencies
    - name: Install Python Dependencies
      run: |
        echo "üì¶ Installing Python dependencies..."
        pip install --upgrade pip
        pip install Flask==2.3.3 Flask-CORS==4.0.0 lxml==6.0.0 reportlab==4.4.2
        pip install requests==2.32.4 pathlib2==2.3.7 dataclasses-json==0.6.1
        echo "‚úÖ Dependencies installed successfully"
        
    # Step 6: Run Mule Guardian Analysis (WITH DEBUG LOGGING)
    - name: Run Mule Guardian Analysis
      id: mule-analysis
      run: |
        echo "üîç Starting Mule Guardian analysis..."
        
        # Determine what to analyze
        if [ -d "sample_demo_project" ]; then
          echo "üìç Found sample project - analyzing sample_demo_project/"
          ANALYSIS_TARGET="sample_demo_project"
        else
          echo "üìç Analyzing current directory"
          ANALYSIS_TARGET="."
        fi
        
        # DEBUG: Show what we're analyzing
        echo "üîç DEBUG: Analysis target is: $ANALYSIS_TARGET"
        echo "üìÅ DEBUG: Contents of analysis target:"
        ls -la "$ANALYSIS_TARGET" || echo "‚ùå Target directory doesn't exist"
        
        if [ -d "$ANALYSIS_TARGET" ]; then
          echo "üìÅ DEBUG: Looking for XML files in target:"
          find "$ANALYSIS_TARGET" -name "*.xml" -type f | head -10
          echo "üìÅ DEBUG: Total XML files found: $(find "$ANALYSIS_TARGET" -name "*.xml" -type f | wc -l)"
        fi
        
        # Verify core files exist
        if [ ! -f "mulesoft_ai_code_review_agent.py" ]; then
          echo "‚ùå Error: mulesoft_ai_code_review_agent.py not found"
          exit 1
        fi
        
        if [ ! -f "comprehensive-mulesoft-ruleset-no-debug.xml" ]; then
          echo "‚ùå Error: comprehensive-mulesoft-ruleset-no-debug.xml not found"
          exit 1
        fi
        
        # DEBUG: Show ruleset info
        echo "üìã DEBUG: PMD ruleset file size: $(wc -l < comprehensive-mulesoft-ruleset-no-debug.xml) lines"
        
        # Run the analysis on the correct target
        echo "üöÄ DEBUG: Running analysis command:"
        echo "python mulesoft_ai_code_review_agent.py $ANALYSIS_TARGET comprehensive-mulesoft-ruleset-no-debug.xml -o quality-report.json -v"
        
        python mulesoft_ai_code_review_agent.py "$ANALYSIS_TARGET" comprehensive-mulesoft-ruleset-no-debug.xml -o quality-report.json -v
        
        # DEBUG: Check if report was generated
        if [ -f "quality-report.json" ]; then
          echo "‚úÖ DEBUG: quality-report.json generated successfully"
          echo "üìä DEBUG: Report file size: $(wc -c < quality-report.json) bytes"
          echo "üìã DEBUG: First 500 characters of report:"
          head -c 500 quality-report.json
          echo -e "\nüìã DEBUG: Report structure check completed"
        else
          echo "‚ùå DEBUG: quality-report.json was not generated!"
          echo "üìÅ DEBUG: Current directory contents:"
          ls -la
        fi
        
        # Extract compliance percentage from report (DYNAMIC CALCULATION)
        echo "üìä DEBUG: Analysis completed successfully"
        echo "üìä DEBUG: Extracting compliance score from report..."
        
        # Calculate compliance dynamically from JSON report
        if [ -f "quality-report.json" ]; then
          # Try to extract compliance_percentage from JSON first
          COMPLIANCE=$(grep -o '"compliance_percentage":[0-9.]*' quality-report.json | cut -d':' -f2 | head -1)
          
          # If not found, calculate manually from violation counts
          if [ -z "$COMPLIANCE" ] || [ "$COMPLIANCE" = "0" ]; then
            echo "üìä DEBUG: Calculating compliance from violation counts..."
            
            # Extract violation counts using grep
            HIGH_COUNT=$(grep -o '"HIGH":[0-9]*' quality-report.json | cut -d':' -f2 | head -1)
            MEDIUM_COUNT=$(grep -o '"MEDIUM":[0-9]*' quality-report.json | cut -d':' -f2 | head -1)
            LOW_COUNT=$(grep -o '"LOW":[0-9]*' quality-report.json | cut -d':' -f2 | head -1)
            
            # Default to 0 if not found
            HIGH_COUNT=${HIGH_COUNT:-0}
            MEDIUM_COUNT=${MEDIUM_COUNT:-0}
            LOW_COUNT=${LOW_COUNT:-0}
            
            echo "üìä DEBUG: HIGH: $HIGH_COUNT, MEDIUM: $MEDIUM_COUNT, LOW: $LOW_COUNT"
            
            # Calculate deduction: HIGH*3 + MEDIUM*2 + LOW*1
            DEDUCTION=$((HIGH_COUNT*3 + MEDIUM_COUNT*2 + LOW_COUNT*1))
            COMPLIANCE=$((100 - DEDUCTION))
            
            # Ensure minimum compliance of 20%
            if [ $COMPLIANCE -lt 20 ]; then
              COMPLIANCE=20
            fi
            
            echo "üìä DEBUG: Calculated compliance: $COMPLIANCE% (deduction: $DEDUCTION points)"
          else
            echo "üìä DEBUG: Found compliance_percentage in report: $COMPLIANCE%"
          fi
        else
          echo "‚ùå DEBUG: quality-report.json not found, using default"
          COMPLIANCE="50"
        fi
        
        echo "COMPLIANCE_SCORE=$COMPLIANCE" >> $GITHUB_OUTPUT
        echo "üõ°Ô∏è Project Compliance: $COMPLIANCE%"
        
    # Step 7: Check Quality Gate
    - name: Quality Gate Check
      run: |
        SCORE=${{ steps.mule-analysis.outputs.COMPLIANCE_SCORE }}
        THRESHOLD=${{ env.COMPLIANCE_THRESHOLD }}
        
        echo "üìä Compliance Score: $SCORE%"
        echo "üéØ Required Threshold: $THRESHOLD%"
        
        # Simple comparison - we know 64.0 < 75.0 for demo
        if (( $(echo "$SCORE < $THRESHOLD" | bc -l) )); then
          RESULT="FAIL"
        else
          RESULT="PASS"
        fi
        
        if [ "$RESULT" = "FAIL" ]; then
          echo "‚ùå QUALITY GATE FAILED"
          echo "Project compliance ($SCORE%) is below required threshold ($THRESHOLD%)"
          echo "Please improve code quality before merging."
          exit 1
        else
          echo "‚úÖ QUALITY GATE PASSED"
          echo "Project meets quality standards!"
        fi
        
    # Step 8: Generate Reports (JSON + HTML)
    - name: Generate Reports
      if: always()
      run: |
        echo "üìÑ JSON report already generated successfully"
        echo "üìÑ Creating dynamic HTML report..."
        
        # Extract values for HTML report
        COMPLIANCE_SCORE="${{ steps.mule-analysis.outputs.COMPLIANCE_SCORE }}"
        
        if [ -f "quality-report.json" ]; then
          TOTAL_VIOLATIONS=$(grep -o '"total_violations":[0-9]*' quality-report.json | cut -d':' -f2 | head -1)
          FILES_SCANNED=$(grep -o '"files_scanned":[0-9]*' quality-report.json | cut -d':' -f2 | head -1)
          HIGH_COUNT=$(grep -o '"HIGH":[0-9]*' quality-report.json | cut -d':' -f2 | head -1)
          MEDIUM_COUNT=$(grep -o '"MEDIUM":[0-9]*' quality-report.json | cut -d':' -f2 | head -1)
          LOW_COUNT=$(grep -o '"LOW":[0-9]*' quality-report.json | cut -d':' -f2 | head -1)
        else
          TOTAL_VIOLATIONS="0"
          FILES_SCANNED="0"
          HIGH_COUNT="0"
          MEDIUM_COUNT="0"
          LOW_COUNT="0"
        fi
        
        # Default values if extraction failed
        TOTAL_VIOLATIONS=${TOTAL_VIOLATIONS:-0}
        FILES_SCANNED=${FILES_SCANNED:-0}
        HIGH_COUNT=${HIGH_COUNT:-0}
        MEDIUM_COUNT=${MEDIUM_COUNT:-0}
        LOW_COUNT=${LOW_COUNT:-0}
        COMPLIANCE_SCORE=${COMPLIANCE_SCORE:-0}
        
        echo "üìä Generating HTML with: Compliance=$COMPLIANCE_SCORE%, Violations=$TOTAL_VIOLATIONS, Files=$FILES_SCANNED"
        
        # Pre-calculate status for HTML
        if [ $COMPLIANCE_SCORE -ge 75 ]; then
          STATUS_TEXT="Quality Gate Passed"
          STATUS_COLOR="#d4edda"
        else
          STATUS_TEXT="Quality Gate Failed"
          STATUS_COLOR="#f8d7da"
        fi
        
        # Generate simple HTML report using basic echo statements
        echo "<!DOCTYPE html>" > quality-report.html
        echo "<html><head><title>Mule Guardian Quality Report</title>" >> quality-report.html
        echo "<style>body{font-family:Arial;margin:40px;background:#f5f7fa}.header{background:#667eea;color:white;padding:20px;border-radius:8px;margin-bottom:20px}.metric{display:inline-block;background:white;margin:10px;padding:15px;border-radius:6px;min-width:100px;text-align:center}.violation{display:inline-block;margin:10px;padding:15px;border-radius:6px;text-align:center}.high{background:#fee;color:#dc3545}.medium{background:#fff8e1;color:#856404}.low{background:#e8f5e8;color:#155724}</style>" >> quality-report.html
        echo "</head><body>" >> quality-report.html
        echo "<div class='header'><h1>üõ°Ô∏è Mule Guardian Quality Report</h1><p>Code Quality Analysis Results</p></div>" >> quality-report.html
        echo "<div class='metric'><h2>${COMPLIANCE_SCORE}%</h2><p>Compliance Score</p><small style='background:${STATUS_COLOR};padding:5px;border-radius:4px'>${STATUS_TEXT}</small></div>" >> quality-report.html
        echo "<div class='metric'><h2>${TOTAL_VIOLATIONS}</h2><p>Total Violations</p></div>" >> quality-report.html
        echo "<div class='metric'><h2>${FILES_SCANNED}</h2><p>Files Scanned</p></div>" >> quality-report.html
        echo "<h2>Violation Breakdown</h2>" >> quality-report.html
        echo "<div class='violation high'><h2>${HIGH_COUNT}</h2><p>High Priority</p></div>" >> quality-report.html
        echo "<div class='violation medium'><h2>${MEDIUM_COUNT}</h2><p>Medium Priority</p></div>" >> quality-report.html
        echo "<div class='violation low'><h2>${LOW_COUNT}</h2><p>Low Priority</p></div>" >> quality-report.html
        echo "<h2>Key Recommendations</h2><ul><li>Address security violations</li><li>Implement error handling</li><li>Add input validation</li><li>Use parameterized queries</li></ul>" >> quality-report.html
        echo "<p><strong>Download the JSON report for detailed analysis</strong></p>" >> quality-report.html
        echo "</body></html>" >> quality-report.html
        
        echo "‚úÖ Dynamic HTML report generated successfully"
        echo "üìä Report includes: $TOTAL_VIOLATIONS violations, $COMPLIANCE_SCORE% compliance"
        
    # Step 9: Upload Reports as Artifacts (JSON + HTML)
    - name: Upload Quality Reports
      if: always()  # Always upload, even if analysis failed
      uses: actions/upload-artifact@v4
      with:
        name: mule-guardian-quality-report
        path: |
          quality-report.json
          quality-report.html
        retention-days: 30
        
    # Step 10: Workflow Summary (Dynamic)
    - name: Workflow Summary
      if: always()
      run: |
        COMPLIANCE_SCORE="${{ steps.mule-analysis.outputs.COMPLIANCE_SCORE }}"
        THRESHOLD="${{ env.COMPLIANCE_THRESHOLD }}"
        
        # Extract dynamic values from JSON report
        if [ -f "quality-report.json" ]; then
          TOTAL_VIOLATIONS=$(grep -o '"total_violations":[0-9]*' quality-report.json | cut -d':' -f2 | head -1)
          HIGH_COUNT=$(grep -o '"HIGH":[0-9]*' quality-report.json | cut -d':' -f2 | head -1)
          MEDIUM_COUNT=$(grep -o '"MEDIUM":[0-9]*' quality-report.json | cut -d':' -f2 | head -1)
          LOW_COUNT=$(grep -o '"LOW":[0-9]*' quality-report.json | cut -d':' -f2 | head -1)
        else  
          TOTAL_VIOLATIONS=0
          HIGH_COUNT=0
          MEDIUM_COUNT=0
          LOW_COUNT=0
        fi
        
        # Determine gate status
        if [ $COMPLIANCE_SCORE -ge $THRESHOLD ]; then
          GATE_STATUS="PASSED ($COMPLIANCE_SCORE% >= $THRESHOLD%)"
        else
          GATE_STATUS="FAILED ($COMPLIANCE_SCORE% < $THRESHOLD%)"
        fi
        
        echo "üéâ MULE GUARDIAN ANALYSIS COMPLETED!"
        echo "üìä Analysis Results:"
        echo "   - Total Violations: ${TOTAL_VIOLATIONS:-0}"
        echo "   - HIGH Priority: ${HIGH_COUNT:-0}"
        echo "   - MEDIUM Priority: ${MEDIUM_COUNT:-0}"
        echo "   - LOW Priority: ${LOW_COUNT:-0}"
        echo "   - Compliance Score: ${COMPLIANCE_SCORE}%"
        echo "   - Quality Gate Status: $GATE_STATUS"
        echo ""
        echo "‚úÖ JSON + HTML Reports Generated Successfully"
        echo "üìÅ Reports uploaded as artifact: mule-guardian-quality-report"
        echo "üîç Download from Actions tab for detailed analysis" 
